name: "Onyx"
comment: '''
  
  	TODO: unresolved issues
  	
'''
fileTypes: [
  "onyx"
  "ox"
  "onyq"
]
firstLineMatch: "^#!/.*\\b(onyx|ox)"
scopeName: "source.onyx"
patterns: [
  {
    name: "comment.line.parse-directive.onyx"
    match: '''
      (?x)
      				(?:
      					^[ \\t]+
      				)?
      				(
      					--!\\s
      				)
      				(
      					.*$
      				)
      				\\n?
    '''
    captures:
      "1":
        name: "punctuation.definition.comment.onyx"
  }
  {
    name: "comment.line.doc.onyx"
    captures:
      "1":
        name: "punctuation.definition.comment.onyx"
    match: '''
      (?x)
      				(?: [ \\t]+ )
      				(
      					(?:
      						(?:--)|
      						\\x{2014}
      					)
      					\\|\\s
      				)
      				.*$\\n?
      			
    '''
  }
  {
    name: "comment.line.onyx"
    begin: '''
      (?x)
      				(?: \\s | ^ )
      				(?: -- | \\x{2014})
      			
    '''
    end: "$"
    patterns: [
      {
        match: "\\b(?:TODO|todo|FIXME|fixme)\\b"
        name: "invalid.illegal.TODO.onyx"
      }
    ]
  }
  {
    comment: "The Arrow style func def"
    contentName: "   xxx.variable.parameter.function.onyx    "
    name: "meta.function.method.with-arguments.onyx"
    begin: '''
      (?x)
      			         (?<=
      			         	^ |
      			         	\\x{20} |
      			         	= |
      			         	\\(
      			         )
      
      	  	         	 # the def keyword
      			         (
      		         		def (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fn (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fx (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fu (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fi (?:\\x{20}|(?:\\\\ \\n)) |
      		         		mf (?:\\x{20}|(?:\\\\ \\n)) |
      		         		\\\\ |
      
      
      		         		# *TODO* the lambda sym must be discounted in identifer of fn!
      
      		         		\\x{03bb} |
      		         		\\x{039b}
      			         ) ?
      			         \\s* # (?:\\x{20}|(?:\\\\\\n))*
      
      			         # complete pathed method name
      			         (?:
      			         	# a method name prefix / path
      			         	(
      				         	(?:
      				         		[A-Z_\\x{80}-\\x{10FFFF}] [-\\x{80}-\\x{10FFFF}\\w]* (?: \\.|::)
      				         	) *
      			         	)
      			           	(
      			           		(?:
      								# the method name
      			           			(?: [a-zA-Z_\\x{80}-\\x{10FFFF}] [-\\x{80}-\\x{10FFFF}\\w] * (?: [?!%'] | =(?!>) )? )
      			           			 |
      			           			# â€¦or an operator method
      				           		(?: ===? | ~~ | !~~ | !~ | \\(\\) | >[>=]? | <=> | <[<=]? | [%&`/\\|] | \\*\\*? | =?~ | [-+]@? | \\[\\]=? )
      				           	)
      			           	)
      			         ) ?
      
      			         ( \\*\\*|\\* )?  # visibility asterisks
      
      			         (?:\\x{20}|(?:\\\\\\n))*
      
       					 # the opening parenthesis for parameters
      			         ( \\( )
      
      			         # make sure we've got the arrow finish - else it's not a fn-def!
      			         (?=
      			         	(?: (?:\\\\\\n) | [^\\n] ) +
      						(?: ->|-->|==>)
      						( [!@>] | \\s | \\n)
      			         )
      	        
    '''
    end: '''
      (?x)
      				# Params ending parentheses
      				( \\) )
      
      				# Possible return type
      				(
      					\\s*
      					[:'.]?
      					\\s*
      					# *TODO* also grouping and pipe
      					(?:
      						!
      						|
      						(?:
      							[*A-Z][\\x{80}-\\x{10FFFF}\\w<>\\[\\]]* \\??
      						)
      					)
      				) ?
      
      				# A fn-def arrow
      				(?:\\x{20}|(?:\\\\\\n))*
      				(
      					(?: ->|-->|==> )
      					[)}!@>]*
      					(?=[\\t\\s\\n])
      				)
      			
    '''
    patterns: [
      {
        match: '''
          (?x)
          						# Type annotation?
          						(?:\\x{20}|(?:\\\\\\n)) * ?
          						(?:
          							['`:.~^]
          							  |
          							\\s(?=[A-Z<\\[])
          						)
          						(?:\\x{20}|(?:\\\\\\n)) *
          
          						# Type manipulation modifier?
          						(?:
          							mut
          							(?= [\\x{20}\\),\\\\] )
          							(?:\\x{20}|(?:\\\\\\n))*
          						) ?
          
          						# Type name / declaration
          						(?:
          							[<\\[] ?
          							# Name
          							(?:
          								[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*
          							)
          							 |
          							# Sum Type
          							(?:
          								\\(
          								(?:\\x{20}|(?:\\\\\\n))*
          								[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]+
          								(
          									(?:\\x{20}|(?:\\\\\\n))*
          									\\|
          									(?:\\x{20}|(?:\\\\\\n))*
          									[*A-Z] [\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*
          								)*
          								(?:\\x{20}|(?:\\\\\\n))*
          								\\)
          								(?:\\x{20}|(?:\\\\\\n))*
          							)
          							[>\\]] ?
          						) ?
          						# (?=[\\),])
          					
        '''
        name: "support.function.other.type-param.onyx"
      }
      {
        match: '''
          (?x)
          						(?<=[\\(,])
          						(?:\\x{20}|(?:\\\\\\n))*
          						(@?)[_a-z\\x{80}-\\x{10FFFF}] [-_\\w\\x{80}-\\x{10FFFF}] *
          					
        '''
        name: "variable.parameter.function.onyx"
      }
    ]
    beginCaptures:
      "1":
        name: "keyword.control.def.onyx"
      "2":
        name: "entity.name.function.onyx"
      "3":
        name: "entity.name.function.onyx"
      "4":
        name: "keyword.control.primary.onyx"
      "5":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
    endCaptures:
      "1":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
      "2":
        name: "support.function.other.type-param.onyx"
      "3":
        name: '''
          punctuation.definition.parameters.onyx, keyword.control.secondary
          					
        '''
  }
  {
    comment: "Lambdas"
    contentName: "   xxx.variable.parameter.function.onyx    "
    name: "meta.function.method.with-arguments.onyx"
    begin: '''
      (?x)
       					 # the opening parenthesis for parameters
      			         ( \\( )
      
      			         # make sure we've got the arrow finish - else it's not a fn-def!
      			         (?=
      			         	(?: (?:\\\\\\n) | [^\\n] ) +
      						(?: ->|-->|==>)([!@>]|\\s|\\n)
      			         )
      	        
    '''
    end: '''
      (?x)
      				# Params ending parentheses
      				( \\) )
      
      				# Possible return type
      				(
      					\\s*
      					[:'`.]?
      					\\s*
      					# *TODO* also grouping and pipe
      					(?:
      						!
      						|
      						(?:
      							[*A-Z][\\x{80}-\\x{10FFFF}\\w<>\\[\\]]* \\??
      						)
      					)
      				) ?
      
      				# A fn-def arrow
      				(
      					(?: ->|-->|==>)[)}!@>]*(?=[\\t\\s\\n])
      				)
      			
    '''
    patterns: [
      {
        match: '''
          (?x)
          						# Type annotation?
          						(?:\\x{20}|(?:\\\\\\n)) * ?
          						(?:
          							['`:.~^]
          							  |
          							\\s(?=[A-Z<\\[])
          						)
          						(?:\\x{20}|(?:\\\\\\n)) *
          
          						# Type manipulation modifier?
          						(?:
          							mut
          							(?= [\\x{20}\\),\\\\] )
          							(?:\\x{20}|(?:\\\\\\n))*
          						) ?
          
          						# Type name / declaration
          						(?:
          							[<\\[] ?
          							# Name
          							(?:
          								[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*
          							)
          							 |
          							# Sum Type
          							(?:
          								\\(
          								(?:\\x{20}|(?:\\\\\\n))*
          								[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]+
          								(
          									(?:\\x{20}|(?:\\\\\\n))*
          									\\|
          									(?:\\x{20}|(?:\\\\\\n))*
          									[*A-Z] [\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*
          								)*
          								(?:\\x{20}|(?:\\\\\\n))*
          								\\)
          								(?:\\x{20}|(?:\\\\\\n))*
          							)
          							[>\\]] ?
          						) ?
          						# (?=[\\),])
          					
        '''
        name: "support.function.other.type-param.onyx"
      }
      {
        match: '''
          (?x)
          						(?<=[^(, ])
          						(?:\\x{20}|(?:\\\\\\n))*
          						[\\w\\x{80}-\\x{10FFFF}]+
          					
        '''
        name: "variable.other.constant.onyx"
      }
      {
        match: '''
          (?x)
          						(?<=[\\(,])
          						(?:\\x{20}|(?:\\\\\\n))*
          						(@?)[-a-z\\x{80}-\\x{10FFFF}] [\\w\\x{80}-\\x{10FFFF}] *
          					
        '''
        name: "variable.parameter.function.onyx"
      }
    ]
    beginCaptures:
      "1":
        name: "keyword.control.def.onyx"
      "2":
        name: "entity.name.function.onyx"
      "3":
        name: "entity.name.function.onyx"
      "4":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
    endCaptures:
      "1":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
      "2":
        name: "support.function.other.type-param.onyx"
      "3":
        name: "entity.name.function.onyx"
  }
  {
    comment: "The OLD SCHOOL func def pattern (no arrow)"
    contentName: "   xxx.variable.parameter.function.onyx    "
    name: "meta.function.method.with-arguments.onyx"
    begin: '''
      (?x)
      			         (?<=
      			         	^ |
      			         	\\x{20} |
      			         	= |
      			         	\\(
      			         )
      
      	  	         	 # the def keyword
      			         (
      		         		fx (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fn (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fu (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fi (?:\\x{20}|(?:\\\\ \\n)) |
      		         		mf (?:\\x{20}|(?:\\\\ \\n)) |
      		         		pr (?:\\x{20}|(?:\\\\ \\n)) |
      		         		my (?:\\x{20}|(?:\\\\ \\n)) |
      		         		ex (?:\\x{20}|(?:\\\\ \\n)) |
      
      		         		def (?:\\x{20}|(?:\\\\ \\n)) |
      		         		fun (?:\\x{20}|(?:\\\\ \\n)) |
      		         		own (?:\\x{20}|(?:\\\\ \\n)) |
      		         		api (?:\\x{20}|(?:\\\\ \\n)) |
      
      		         		proc (?:\\x{20}|(?:\\\\ \\n)) |
      		         		cfun (?:\\x{20}|(?:\\\\ \\n)) |
      		         		export (?:\\x{20}|(?:\\\\ \\n)) |
      		         		func (?:\\x{20}|(?:\\\\ \\n)) |
      		         		meth (?:\\x{20}|(?:\\\\ \\n)) |
      
      		         		\\\\ |
      
      		         		# *TODO* the lambda sym must be discounted in identifer of fn!
      
      		         		\\x{03bb} |
      		         		\\x{039b}
      			         )
      			         \\s* # (?:\\x{20}|(?:\\\\\\n))*
      
      			         # complete pathed method name
      			         (?:
      			         	# a method name prefix / path
      			         	(
      				         	(?:
      				         		(?:[A-Z_\\x{80}-\\x{10FFFF}] [-\\x{80}-\\x{10FFFF}\\w]*)|self (?: \\.|::)
      				         	) *
      			         	)
      			           	(
      			           		(?:
      								# the method name
      			           			(?: [a-zA-Z_\\x{80}-\\x{10FFFF}] [-\\x{80}-\\x{10FFFF}\\w] * (?: [?!%'] | =(?!>) )? )
      			           			 |
      			           			# â€¦or an operator method
      				           		(?: ===? | ~~ | !~~ | !~ | \\(\\) | >[>=]? | <=> | <[<=]? | [%&`/\\|] | \\*\\*? | =?~ | [-+]@? | \\[\\]=? )
      				           	)
      			           	)
      			         ) ?
      
      			         ( \\*\\*|\\* )?  # visibility asterisks
      
      			         (?:\\x{20}|(?:\\\\\\n))*
      
       					 # the opening parenthesis for parameters
      			         ( \\( )
      
      	        
    '''
    end: '''
      (?x)
      				# Params ending parentheses
      				( \\) )
      
      				# Possible return type
      				(
      					\\s*
      					[:'`.]?
      					\\s*
      					# *TODO* also grouping and pipe
      					(?:
      						!
      						|
      						(?:
      							[A-Z][\\x{80}-\\x{10FFFF}\\w<>\\[\\]] \\??
      						)
      					)
      				) ?
      
      			
    '''
    patterns: [
      {
        match: '''
          (?x)
          						# Type annotation?
          						(?:\\x{20}|(?:\\\\\\n)) * ?
          						(?:
          							['`:.~^]
          							  |
          							\\s(?=[A-Z<\\[])
          						)
          						(?:\\x{20}|(?:\\\\\\n)) *
          
          						# Type manipulation modifier?
          						(?:
          							mut
          							(?= [\\x{20}\\),\\\\] )
          							(?:\\x{20}|(?:\\\\\\n))*
          						) ?
          
          						# Type name / declaration
          						(?:
          							[<\\]] ?
          							# Name
          							(?:
          								[A-Z][\\[\\]<<\\w\\x{80}-\\x{10FFFF}]*
          							)
          							 |
          							# Sum Type
          							(?:
          								\\(
          								(?:\\x{20}|(?:\\\\\\n))*
          								[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]+
          								(
          									(?:\\x{20}|(?:\\\\\\n))*
          									\\|
          									(?:\\x{20}|(?:\\\\\\n))*
          									[*A-Z] [\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*
          								)*
          								(?:\\x{20}|(?:\\\\\\n))*
          								\\)
          								(?:\\x{20}|(?:\\\\\\n))*
          							)
          							[>\\]] ?
          						) ?
          						# (?=[\\),])
          					
        '''
        name: "support.function.other.type-param.onyx"
      }
      {
        match: '''
          (?x)
          						(?<=[^(, ])
          						(?:\\x{20}|(?:\\\\\\n))*
          						[\\w\\x{80}-\\x{10FFFF}]+
          					
        '''
        name: "variable.other.constant.onyx"
      }
      {
        match: '''
          (?x)
          						(?<=[\\(,])
          						(?:\\x{20}|(?:\\\\\\n))*
          						(@?)[-a-z\\x{80}-\\x{10FFFF}] [\\w\\x{80}-\\x{10FFFF}] *
          					
        '''
        name: "variable.parameter.function.onyx"
      }
    ]
    beginCaptures:
      "1":
        name: "keyword.control.def.onyx"
      "2":
        name: "entity.name.function.onyx"
      "3":
        name: "entity.name.function.onyx"
      "4":
        name: "keyword.control.primary.onyx"
      "5":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
    endCaptures:
      "1":
        name: "punctuation.definition.parameters.onyx, keyword.control.secondary"
      "2":
        name: "support.function.other.type-param.onyx"
      "3":
        name: "entity.name.function.onyx"
  }
  {
    comment: "typedef - Type Declaration / Definition"
    name: "meta.class.onyx"
    captures:
      "1":
        name: "keyword.control.class.onyx"
      "2":
        name: "entity.name.type.class.onyx"
      "3":
        name: "entity.name.type.class.onyx"
      "4":
        name: "punctuation.separator.onyx"
      "5":
        name: "keyword.control.primary.onyx"
      "6":
        name: "entity.name.type.class.super.onyx"
      "7":
        name: "punctuation.separator.onyx"
      "8":
        name: "keyword.control.primary.onyx"
      "9":
        name: "entity.name.type.class.super.onyx"
    match: '''
      (?x)
      				(?: ^ | : | => )
      				\\s*
      				( type|trait | enum|flags|union|struct |redef|reop|reo|ext|extend )
      				\\s+
      				(?:
      					# deffed type/class name
      					((?: \\$\\.)? [.A-Z_\\x{80}-\\x{10FFFF}][-.\\w\\x{80}-\\x{10FFFF}]*)
      					( [\\(<\\[](?: [,\\s.a-zA-Z0-9_\\x{80}-\\x{10FFFF}]+ )[\\)>\\]] )?
      					\\s*
      
      					# inheritance
      					(?:
      						(?:
      							# inherit "arrow"
      							( < )
      							\\s*
      
      							(
      								# modifier
      								(?: 'abstract)?
      								\\s*
      							)?
      
      							# inherited type
      							(
      								[.A-Z\\x{80}-\\x{10FFFF}][-.\\w\\x{80}-\\x{10FFFF}]*
      								(?:
      									[(<\\[] (?: [,.a-zA-Z0-9_-]+ ) [)>\\]]
      								)?
      							)?
      						)
      					|
      						(?:
      							# alias eq
      							( = )
      							\\s*
      
      							# aliased type
      							(
      								(?:
      									[.A-Z\\x{80}-\\x{10FFFF}][-.\\w\\x{80}-\\x{10FFFF}]*
      									(?:
      										[(<\\[] (?: [,.a-zA-Z0-9_-]+ ) [)>\\]]
      									)?
      									\\s*\\|\\s*
      								)*
      								(?:
      									[.A-Z\\x{80}-\\x{10FFFF}][-.\\w\\x{80}-\\x{10FFFF}]*
      									(?:
      										[(<\\[] (?: [,.a-zA-Z0-9_-]+ ) [)>\\]]
      									)?
      								)?
      							)
      						)
      					)?
      				)
      
      			
    '''
  }
  {
    match: "(\\{\\%|\\%\\}|(?:\\{=)|(?:=\\}))"
    name: "keyword.operator.macro.onyx"
  }
  {
    match: "#[\\w_-â€”]+\\b"
    captures:
      "0":
        name: "constant.other.symbol.onyx"
  }
  {
    comment: "Char-literal"
    match: "%\"(\\\\)?.\""
    name: "string.quoted.single.onyx"
  }
  {
    begin: "#'"
    captures:
      "0":
        name: "punctuation.definition.constant.onyx"
    end: "'"
    name: "constant.other.symbol.single-quoted.onyx"
    patterns: [
      {
        match: "\\\\['\\\\]"
        name: "constant.character.escape.onyx"
      }
    ]
  }
  {
    begin: "#\""
    captures:
      "0":
        name: "punctuation.definition.constant.onyx"
    end: "\""
    name: "constant.other.symbol.double-quoted.onyx"
    patterns: [
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    comment: "double quoted string (allows for interpolation)"
    begin: "(?:%(r|raw|t|c))?(\")"
    beginCaptures:
      "1":
        name: "keyword.control.primary.onyx"
      "2":
        name: "punctuation.definition.string.begin.onyx, string.quoted.double.onyx"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx, string.quoted.double.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        match: "."
        captures:
          "0":
            name: "string.quoted.double.onyx"
      }
    ]
  }
  {
    comment: "Pragmas / Directives / Annotations"
    name: "keyword.control.secondary.pragma.onyx"
    match: '''
      (?x)
      				(?:^|\\s)
      				'!?([a-z][-_\\w\\x{2013}]+(?:[!?])? (?: \\s? [:=] \\s? [-\\w\\x{2013}]+)? )
      			
    '''
  }
  {
    description: "Tag / Symbol Constant"
    match: "(?: (\\#) [-\\w_\\x{80}-\\x{10FFFF}]+ ) | (?: (\\#)\" (?: [^\"]|(?:\\\\\") )+ \" ) "
    name: "constant.language.onyx"
  }
  {
    name: "meta.module.onyx"
    match: '''
      (?x)
      				^
      				\\s*
      				(module|mixin)
      				\\s+
      				(
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))?
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))?
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))*
      					[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*
      				)
      			
    '''
    captures:
      "1":
        name: "keyword.control.module.onyx"
      "2":
        name: "entity.name.type.module.onyx"
      "3":
        name: "entity.other.inherited-class.module.first.onyx"
      "4":
        name: "punctuation.separator.inheritance.onyx"
      "5":
        name: "entity.other.inherited-class.module.second.onyx"
      "6":
        name: "punctuation.separator.inheritance.onyx"
      "7":
        name: "entity.other.inherited-class.module.third.onyx"
      "8":
        name: "punctuation.separator.inheritance.onyx"
  }
  {
    description: "TERSE Module Declaration"
    name: "meta.module.onyx"
    match: '''
      (?x)
      				^
      				\\s*
      				(
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))?
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))?
      					([A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*(\\.))*
      					[A-Z\\x{80}-\\x{10FFFF}][\\w\\x{80}-\\x{10FFFF}]*
      					(?:
      						[<\\[]
      							[, .=A-Z\\x{80}-\\x{10FFFF}\\w]+
      						[>\\]]
      					)?
      				)
      				(:|=>)
      			
    '''
    captures:
      "1":
        name: "entity.name.type.module.onyx"
      "2":
        name: "entity.other.inherited-class.module.first.onyx"
      "3":
        name: "punctuation.separator.inheritance.onyx"
      "4":
        name: "entity.other.inherited-class.module.second.onyx"
      "5":
        name: "punctuation.separator.inheritance.onyx"
      "6":
        name: "entity.other.inherited-class.module.third.onyx"
      "7":
        name: "punctuation.separator.inheritance.onyx"
      "8":
        name: "keyword.control.module.onyx"
  }
  {
    name: "meta.lib.onyx"
    match: '''
      (?x)
      				^
      				\\s*
      				(lib|api)
      				\\s+
      				(
      					([A-Z]\\w*(::))?
      					([A-Z]\\w*(::))?
      					([A-Z]\\w*(::))*
      					[A-Z]\\w*
      				)
      			
    '''
    captures:
      "1":
        name: "keyword.control.lib.onyx"
      "2":
        name: "entity.name.type.lib.onyx"
      "3":
        name: "entity.other.inherited-class.lib.first.onyx"
      "4":
        name: "punctuation.separator.inheritance.onyx"
      "5":
        name: "entity.other.inherited-class.lib.second.onyx"
      "6":
        name: "punctuation.separator.inheritance.onyx"
      "7":
        name: "entity.other.inherited-class.lib.third.onyx"
      "8":
        name: "punctuation.separator.inheritance.onyx"
  }
  {
    comment: "else if is a common mistake carried over from other languages. it works if you put in a second end, but itâ€™s never what you want."
    match: "(?<! [-.\\x{80}-\\x{10FFFF}\\w])else(\\s)+if\\b"
    name: "invalid.deprecated.onyx"
  }
  {
    comment: "everything being a reserved word, not a value and needing a 'end' is a.."
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(
      					BEGIN|alias|await|begin|try|match|branch|switch|
      					uniq|unique|distinct|friend|END|ensure|fulfil|
      					iff|if|ifdef|lib|module|mixin|out|rescue|with|union|
      					enum|template|macro|suffix|babel|then|do|
      					begins|below|following|follows|throughout|
      					type__remove_ke|unless|where|using|fun|
      					spawn|aside|conflicts|raw|
      					include|override|redef
      				)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])
      			
    '''
    name: "keyword.control.primary.onyx"
  }
  {
    comment: "everything being a reserved word, not a value and needing a 'end' is a.."
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(else|elsif|elif|in|as\\?|as|is|of\\?|of|repeat|each|for|until|while)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])
      			
    '''
    name: "keyword.control.secondary.onyx"
  }
  {
    comment: "everything being a reserved word, not a value and needing a 'end' is a.."
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(case|when)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])
      			
    '''
    name: "keyword.control.secondary.when.onyx"
  }
  {
    comment: "\"end\"-keyword"
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				end
      				(?: \\s+[^-][^;\\n\\s]+ )*
      				(?! (?: -- | â€”) )
      			
    '''
    name: "keyword.control.secondary.end.onyx"
  }
  {
    comment: " as above, just doesn't need a 'end' and does a logic operation"
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(and|not|or)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])
      			
    '''
    name: "keyword.operator.logical.onyx"
  }
  {
    comment: " just as above but being not a logical operation"
    match: "(?<! [-.\\x{80}-\\x{10FFFF}\\w])(alias|alias_method|break|next|pointerof|typeof|sizeof|instance_sizeof|zredo|retry|~\\.|~>|~~>|:|=>|return|breaking|nop|super|undef|yield)(?![.\\x{80}-\\x{10FFFF}\\w?!-])|\\bdefined\\?|\\bblock_given\\?"
    name: "keyword.control.pseudo-method.onyx"
  }
  {
    match: "\\b(nil|true|false)(?![.\\x{80}-\\x{10FFFF}\\w?!-])"
    name: "constant.language.onyx"
  }
  {
    match: '''
      (?x)
      				(?<!- [-\\x{80}-\\x{10FFFF}\\w.?!] )
      				(__(FILE|LINE)__ | self | this)
      				(?![-\\x{80}-\\x{10FFFF}\\w.?!])
      			
    '''
    name: "variable.language.onyx"
  }
  {
    comment: " everything being a method but having a special function is a.."
    match: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(init|initialize|new|loop|raise|getter|setter|property|describe|it|with|delegate|def_hash|def_equals|def_equals_and_hash|forward_missing_to|record|assert_responds_to)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])[!?]?
      			
    '''
    name: "keyword.other.special-method.onyx"
  }
  {
    begin: '''
      (?x)
      				(?<! [-.\\x{80}-\\x{10FFFF}\\w])
      				(require)
      				(?![.\\x{80}-\\x{10FFFF}\\w?!-])
      			
    '''
    captures:
      "1":
        name: "keyword.other.special-method.onyx"
    end: "$|(?=--[ \\n])"
    name: "meta.require.onyx"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    captures:
      "1":
        name: "punctuation.definition.variable.onyx"
    match: '''
      (?x)
      				(?:
      					([@Â·])
      					[a-zA-Z_\\x{80}-\\x{10FFFF}][-\\w\\x{80}-\\x{10FFFF}]*[?!%=]?
      				) | (?:
      					%\\d
      				)
      			
    '''
    name: "variable.other.readwrite.instance.onyx"
  }
  {
    name: "support.class.onyx"
    undefined: "match"
    "(?x)\n\t\t\t\t(\n\t\t\t\t\t\\$?\n\t\t\t\t\t['`.~^]\\s*\n\t\t\t\t\t(?:[<\\[]?[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*)|(?:<>)\n\t\t\t\t)|(\n\t\t\t\t\t\\$?\n\t\t\t\t\t['`:.~^]\\s*\n\t\t\t\t\t\\(\\s*\n\t\t\t\t\t(?:[<\\[]?[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*)|(?:<>)\n\t\t\t\t\t(\n\t\t\t\t\t\t\\s*\\|\\s*\n\t\t\t\t\t\t(?:[<\\[]?[*A-Z][\\[\\]<>\\w\\x{80}-\\x{10FFFF}]*)|(?:<>)\n\t\t\t\t\t)*\n\t\t\t\t\t\\s*\\)\n\t\t\t\t)\n\t\t\t": "captures"
  }
  {
    captures:
      "1":
        name: "punctuation.definition.variable.onyx"
    match: "(@@)[a-zA-Z_\\x{80}-\\x{10FFFF}][-\\w\\x{80}-\\x{10FFFF}]*[?!%=]?"
    name: "variable.other.readwrite.class.onyx"
  }
  {
    captures:
      "1":
        name: "punctuation.definition.variable.onyx"
    match: "(\\$)[a-zA-Z_\\x{80}-\\x{10FFFF}][-\\x{80}-\\x{10FFFF}\\w]*"
    name: "variable.other.readwrite.global.onyx"
  }
  {
    captures:
      "1":
        name: "punctuation.definition.variable.onyx"
    match: "(\\$)(!|@|&|`|'|\\+|\\d+|~|^|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpv])"
    name: "variable.other.readwrite.global.pre-defined.onyx"
  }
  {
    begin: "\\b(ENV)\\["
    beginCaptures:
      "1":
        name: "variable.other.constant.onyx"
    end: "\\]"
    name: "meta.environment-variable.onyx"
    patterns: [
      {
        include: "$self"
      }
    ]
  }
  {
    match: "(?<! [-\\x{80}-\\x{10FFFF}\\w])[A-Z\\x{80}-\\x{10FFFF}][-\\w\\x{80}-\\x{10FFFF}]*"
    name: "support.class.onyx"
  }
  {
    match: "(?<! [-\\x{80}-\\x{10FFFF}\\w])[A-Z\\x{80}-\\x{10FFFF}][-\\w\\x{80}-\\x{10FFFF}]*\\b"
    name: "variable.other.constant.onyx"
  }
  {
    match: "(?<! [-\\w\\x{80}-\\x{10FFFF}])(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)(_?(u8|u16|u32|u64|i8|i16|i32|i64|f32|f64))?\\b"
    name: "constant.numeric.onyx"
  }
  {
    comment: "Needs higher precidence than regular expressions."
    match: "/="
    name: "keyword.operator.assignment.augmented.onyx"
  }
  {
    begin: "%x\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "execute string (allow for interpolation)"
    end: "\\}"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.interpolated.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_curly_i"
      }
    ]
  }
  {
    begin: "%x\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "execute string (allow for interpolation)"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.interpolated.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_brackets_i"
      }
    ]
  }
  {
    begin: "%x\\<"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "execute string (allow for interpolation)"
    end: "\\>"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.interpolated.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_ltgt_i"
      }
    ]
  }
  {
    begin: "%x\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "execute string (allow for interpolation)"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.interpolated.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_parens_i"
      }
    ]
  }
  {
    begin: "%x([^\\w])"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "execute string (allow for interpolation)"
    end: "\\1"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.interpolated.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    begin: '''
      (?x)
      			   (?:
      			     ^                      # beginning of line
      			   | (?<=                   # or look-behind on:
      			       [=>~(?:\\[,|&;]
      			     | [\\s;]if\\s			# keywords
      			     | [\\s;]elsif\\s
      			     | [\\s;]while\\s
      			     | [\\s;]unless\\s
      			     | [\\s;]when\\s
      			     | [\\s;]assert_match\\s
      			     | [\\s;]or\\s			# boolean opperators
      			     | [\\s;]and\\s
      			     | [\\s;]not\\s
      			     | [\\s.]index\\s			# methods
      			     | [\\s.]scan\\s
      			     | [\\s.]sub\\s
      			     | [\\s.]sub!\\s
      			     | [\\s.]gsub\\s
      			     | [\\s.]gsub!\\s
      			     | [\\s.]match\\s
      			     )
      			   | (?<=                  # or a look-behind with line anchor:
      			        ^when\\s            # duplication necessary due to limits of regex
      			      | ^if\\s
      			      | ^elsif\\s
      			      | ^while\\s
      			      | ^unless\\s
      			      )
      			   )
      			   \\s*((/))(?![*+{}?])
      			
    '''
    captures:
      "1":
        name: "string.regexp.classic.onyx"
      "2":
        name: "punctuation.definition.string.onyx"
    comment: '''
      regular expressions (normal)
      			we only start a regexp if the character before it (excluding whitespace)
      			is what we think is before a regexp
      			
    '''
    contentName: "string.regexp.classic.onyx"
    end: "((/[eimnosux]*))"
    patterns: [
      {
        include: "#regex_sub"
      }
    ]
  }
  {
    begin: "%r\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "regular expressions (literal)"
    end: "\\}[eimnosux]*"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.regexp.mod-r.onyx"
    patterns: [
      {
        include: "#regex_sub"
      }
      {
        include: "#nest_curly_r"
      }
    ]
  }
  {
    begin: "%r\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "regular expressions (literal)"
    end: "\\][eimnosux]*"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.regexp.mod-r.onyx"
    patterns: [
      {
        include: "#regex_sub"
      }
      {
        include: "#nest_brackets_r"
      }
    ]
  }
  {
    begin: "%r\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "regular expressions (literal)"
    end: "\\)[eimnosux]*"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.regexp.mod-r.onyx"
    patterns: [
      {
        include: "#regex_sub"
      }
      {
        include: "#nest_parens_r"
      }
    ]
  }
  {
    begin: "%r\\<"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "regular expressions (literal)"
    end: "\\>[eimnosux]*"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.regexp.mod-r.onyx"
    patterns: [
      {
        include: "#regex_sub"
      }
      {
        include: "#nest_ltgt_r"
      }
    ]
  }
  {
    begin: "%r([^\\w])"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "regular expressions (literal)"
    end: "\\1[eimnosux]*"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.regexp.mod-r.onyx"
    patterns: [
      {
        include: "#regex_sub"
      }
    ]
  }
  {
    begin: "%[QWSR]?\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal capable of interpolation ()"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.upper.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_parens_i"
      }
    ]
  }
  {
    begin: "%[QWSR]?\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal capable of interpolation []"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.upper.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_brackets_i"
      }
    ]
  }
  {
    begin: "%[QWSR]?\\<"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal capable of interpolation <>"
    end: "\\>"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.upper.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_ltgt_i"
      }
    ]
  }
  {
    begin: "%[QWSR]?\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal capable of interpolation -- {}"
    end: "\\}"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.double.onyx.mod"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
      {
        include: "#nest_curly_i"
      }
    ]
  }
  {
    begin: "%[QWSR]([^\\w])"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal capable of interpolation -- wildcard"
    end: "\\1"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.upper.onyx"
    patterns: [
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    begin: "%[qws]\\("
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal incapable of interpolation -- ()"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.lower.onyx"
    patterns: [
      {
        match: "\\\\\\)|\\\\\\\\"
        name: "constant.character.escape.onyx"
      }
      {
        include: "#nest_parens"
      }
    ]
  }
  {
    begin: "%[qws]\\<"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal incapable of interpolation -- <>"
    end: "\\>"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.lower.onyx"
    patterns: [
      {
        match: "\\\\\\>|\\\\\\\\"
        name: "constant.character.escape.onyx"
      }
      {
        include: "#nest_ltgt"
      }
    ]
  }
  {
    begin: "%[qws]\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal incapable of interpolation -- []"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.lower.onyx"
    patterns: [
      {
        match: "\\\\\\]|\\\\\\\\"
        name: "constant.character.escape.onyx"
      }
      {
        include: "#nest_brackets"
      }
    ]
  }
  {
    begin: "%[qws]\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal incapable of interpolation -- {}"
    end: "\\}"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.lower.onyx"
    patterns: [
      {
        match: "\\\\\\}|\\\\\\\\"
        name: "constant.character.escape.onyx"
      }
      {
        include: "#nest_curly"
      }
    ]
  }
  {
    begin: "%[qws]([^\\w])"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    comment: "literal incapable of interpolation -- wildcard"
    end: "\\1"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    name: "string.quoted.other.literal.lower.onyx"
    patterns: [
      {
        comment: "Cant be named because its not neccesarily an escape."
        match: "\\\\."
      }
    ]
  }
  {
    comment: "\"heredoc\" string, interpolated"
    name: "string.unquoted.heredoc.onyx"
    begin: "\\s*%:\\s*(\\w+)$"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    end: "\\s*\\1(\\.|$)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    patterns: [
      {
        include: "#heredoc"
      }
      {
        include: "#interpolated_onyx"
      }
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    comment: "\"heredoc\" string, straight"
    name: "string.unquoted.heredoc.onyx"
    begin: "\\s*%[sr]:\\s*(\\w+)$"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.onyx"
    end: "\\s*\\1(\\.|$)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.onyx"
    patterns: [
      {
        include: "#heredoc"
      }
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    match: "<\\[|\\]>"
    name: "punctuation.section.tuple.onyx"
  }
  {
    match: "<\\{|\\}>"
    name: "punctuation.section.tuple.onyx"
  }
  {
    match: "\\{|\\}"
    name: "punctuation.section.set.onyx"
  }
  {
    match: "\\(|\\)"
    name: "punctuation.section.group.onyx"
  }
  {
    match: "\\[|\\]"
    name: "punctuation.section.array.onyx"
  }
  {
    name: "keyword.operator.comparison.onyx"
    match: '''
      (?x)
      				(
      					<=> |
      					< (?! < | =) |
      					> (?! < | = | >) |
      					<= |
      					>= |
      					=== |
      					== |
      					=~ |
      					!= |
      					!~ |
      					(?<= [ \\t]) \\?
      				)|(
      					(?: not | and | or | isnt | is )
      					(?= [\\s\\n])
      				)
      			
    '''
  }
  {
    comment: "A regular identifier (var/fn) used in code"
    name: "generic.code.onyx"
    match: '''
      (?x)
      				[a-z_\\x{80}-\\x{10FFFF}]
      				(?:
      					[-\\w\\x{80}-\\x{10FFFF}] *
      					[\\w\\x{80}-\\x{10FFFF}?!%] ? # removed `=` for clash with macro-end-tok etc.
      				)
      				(?=[^-\\w\\x{80}-\\x{10FFFF}])
      			
    '''
  }
  {
    match: "<<=|%=|&=|\\*=|\\*\\*=|\\+=|\\-=|\\^=|\\|{1,2}=|\\.=|<<|\\.\\."
    name: "keyword.operator.assignment.augmented.onyx"
  }
  {
    match: "(%|&|\\*\\*|\\*|\\+|\\-|/)"
    name: "keyword.operator.arithmetic.onyx"
  }
  {
    match: "="
    name: "keyword.operator.assignment.onyx"
  }
  {
    match: '''
      (?x)
      				\\| | ~ | >> | \\\\
      			
    '''
    name: "keyword.operator.other.onyx"
  }
  {
    match: "\\;"
    name: "punctuation.separator.statement.onyx"
  }
  {
    match: ","
    name: "punctuation.separator.object.onyx"
  }
  {
    match: "\\."
    name: "punctuation.separator.method.onyx"
  }
]
undefined: "repository"
